import math


class Wheel:
    def __init__(self, bitseq):
        self.seq = bitseq
        self.current = 0

    def turn(self):
        self.current = (self.current + 1) % len(self.seq)

    def turnback(self):
        self.current = (self.current - 1) % len(self.seq)

    def value(self):
        return self.seq[self.current]

    def reset(self):
        self.current = 0


def to_bitseq(n):
    return [int(c) for c in bin(n)[2:]]

M1 = Wheel(to_bitseq(41))
M2 = Wheel(to_bitseq(2))
chis = [Wheel(to_bitseq(1)), Wheel(to_bitseq(18)), Wheel(to_bitseq(9)), Wheel(to_bitseq(21)), Wheel(to_bitseq(19))]
psis = [Wheel(to_bitseq(19)), Wheel(to_bitseq(20)), Wheel(to_bitseq(18)), Wheel(to_bitseq(1)), Wheel(to_bitseq(4))]

class Lorenz:
    def __init__(self, M1, M2, chis, psis):
        self.M1 = M1
        self.M2 = M2
        self.chis = chis
        self.psis = psis

    def reset(self):
        self.M1.reset()
        self.M2.reset()
        for chi, psi in zip(self.chis, self.psis):
            chi.reset()
            psi.reset()

    def encrypt(self, bitseq):
        assert len(bitseq) == 5, len(bitseq)
        Z = [0, 0, 0, 0, 0]
        for chi in self.chis:
            chi.turn()

        self.M1.turn()
        if self.M1.value():
            self.M2.turn()
        if self.M2.value():
            for psi in self.psis:
                psi.turn()

        for i in range(5):
            b = bitseq[i]
            chi = self.chis[i]
            psi = self.psis[i]

            K = chi.value() ^ psi.value()
            Z[i] = K ^ b

        return Z



if __name__ == "__main__":
    lorenz = Lorenz(M1, M2, chis, psis)

    message = "00011 11010 11011 00110 11111 10001 11001 11001 01100 10101 11011 00110 11111 00011 11000 01010 10011 01100 11011 10000 11111 01010 11011 11000 11111 11110 01011 10101 11011 11000 11101 11111 00001 00001 11110 01010 11011 10000 11111 10010 11100 01001 00001 11011 11101 11111 00111 01111 10000 10100 10110 11011 01010 11111 01011 00001 10001 10110 10001 00100 11001 11011 00001 11111 00110 10101 01101 01110 10101 10011 11101 10011 10111 11100 10101 11011 11101 00001 11111 01100 10101 11011 11101 11111 10010 11000 01011 10110 01101 10110 11011 00001 11111 11110 10010 00111 11011 11101 11111 00001 00111 00110 00011 10001 11011 01010 10000 11111 00111 00101 11100 11011 00110 11111 01111 11011 00110 11111 11000 00100 10010 11011 11101 10000 01010 11111 10000 11011 11101 01010 11111 10010 01001 01010 11101 10011 00011 10000 01111 11001 11011 11101 11111 01100 00101 11011 11101 11111 10001 01101 00110 11011 11000 00001 11111 00011 11101 01101 11001 11100 01010 10100 00001 01110 10101 01111 00011 00101 11011 00001 11111 00110 11011 11101 11111 01111 01010 00100 00111 11000 00111 00101 01011 11100 01110 11101 11100 01011 01011 01110 11000 00001 01100 00001 00011 11011 10000 11111 00001 11000 00110 10000 00011 11011 11000 11111 01100 11100 11001 01110 10010 01011 11011 11000 11111 10111 01110 01011 11001 11100 11001 00011 10110 11100 11010 01100 11011 00110 11111 00100 00110 01011 01110 10011 01001 00011 11011 00001 11111 10000 11011 01010 11111 10111 01110 10001 10111 01011 01100 11010 10110 01111 11010 11101 11010 01001 10100 00111 11011 00001 00110 10000 11111 10011 11011 10000 11111 00111 01101 10000 01010 00011 10100 11011 00110 11111 10111 10011 00111 00011 10110 11010 00111 11010 00100 11011 01010 11111 10000 11101 11011 00110 11111 10110 11011 11101 10000 11111 11010 10111 00001 11011 00110 11111 10000 00011 11011 01010 11111 10000 11110 10001 10101 11010 11101 11011 10000 11111 00001 10010 11011 00001 00001 11111 00110 11011 00001 11111 10001 00001 10101 01111 01011 11010 01100 00110 10011 00110 10011 10101 11101 00111 11011 10000 11111 01111 01010 00100 00111 10000 10001 11000 01110 10101 10101 01111 00001 00001 00101 00111 10110 10110 11001 01110 00111 01001 01111 11000 11011 01010 11111 10101 10011 11101 10010 00101 11100 11011 11000 11111 10011 11010 10111 11011 11000 11111 10101 11101 11010 11011 10000 11111 00011 11011 11101 11111 10011 00001 10000 11011 11101 11111 10100 00100 10100 11011 00110 11111 10111 00001 10000 00101 11011 10000 11111 11010 11000 01101 00110 10010 11000 01101 11011 00001 11111 10110 00110 01010 01011 10100 00011 00001 10111 10111 11101 10101 01010 11000 00111 01011 11101 10111 11001 10101 11100 00101 00101 11011 00110 11111 10110 10001 10100 11011 01010 11111 10000 11010 00100 11001 10001 00001 01111 10001 10110 00011 10100 01101 11010 10001 11011 10000 00001 01010 11111 01010 10100 10001 11011 00001 11111 10010 00110 10000 01100 00001 11011 11101 11111 10110 01111 01111 01001 10000 10000 11001 11110 10111 10101 10110 01111 00101 00111 10110 10100 11011 10000 11101 11111 00001 00100 11011 01010 01010 11101 11111 01110 10000 01110 11011 10000 11111 10111 11011 11000 11111 00011 00001 11010 11011 01010 11111 01101 01010 01110 00110 00110 10011 11101 11011 00110 11111 01110 11100 10000 10100 11011 10000 11111 10001 11011 11101 11111 10100 01001 11010 01101 11101 10101 01111 11011 11000 01010 11111 01101 11011 10000 11111 00110 00001 01010 11011 11000 11111 10110 00100 00111 00001 01100 11000 11011 00110 11111 10101 11001 11010 11011 11000 11111 11110 11101 10100 11011 11000 00110 11111 10011 10100 11001 01011 10000 11011 10000 11111 01001 10010 10100 10100 10110 01100 00011 11101 10001 01101 00110 10110 11001 00111 11100 01011 11011 00001 11111 10011 10010 10100 10110 11101 00110 00100 00001 11011 11101 11111 10110 10110 11011 11101 11111 00011 10101 11011 00110 11111 10000 00101 10110 10110 11011 11000 10000 11111 11100 10011 10100 10111 10100 00111 01100 01001 01011 01100 11110 00110 01011 01011 11001 11011 01010 11111 00011 01011 01101 01101 10001 00101 11011 00110 11000 11111 10101 01010 11001 00110 11010 10110 00100 11011 01010 11111 10110 00001 10111 10001 10100 10111 10111 10100 11011 11000 11111 10101 11011 00110 11111 01100 11011 00001 11111 01010 01111 10000 00001 10000 11100 01101 10110 11011 00110 11111 01111 10111".split(" ")
    

    
    msg = [[int(c) for c in s] for s in message]
    result = [lorenz.encrypt(s) for s in msg]
    y = " ".join(["".join([f"{m}" for m in l]) for l in result])
    print(y)
    
    
